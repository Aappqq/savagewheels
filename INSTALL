_.o0 Savage Wheels installation instructions 0o._

Last updated on 28 Jun 2013

1) Supported platforms
  * Linux x86/x64 - Tested on Archlinux/Ubuntu/Debian
  * Windows x86/x64 - Tested on Windows XP/Vista/2008R2

2) Required files

Get the latest source code from GitHub:

    git clone git://github.com/petarov/savagewheels.git savagewheels

Get the data files archive 'savagewheels-gamedata.tar.gz' from 
https://code.google.com/p/savagewheels. Extract the downloaded archive into
the bin/ folder. This archive should contain the folders: 
autos/, graphics/ and  sounds/.

3) Installation on Linux platforms

3.1) Requirements:
  * CMake 2.8.x
  * (Ubuntu specific) Install package 'build-essential'.
  * libSDL >= 1.2.11 - You should install it using your package manager.
  * For music support either:
    - SDL_Mixer >= 1.2.12 - You should install it using your package manager.
  or
    - FMod Ex API 4.x - Install using your package manager or get the package 
	  from FMod's website.

3.2) Compile & Build

	a) Install the libSDL package using the package manager on your Linux 
	distribution.

	b) Install one of the supported sound libraries. See 3.2.1)	

	c) Run the build script - build.sh
   	$ ./build.sh
   
   	d) Go to the 'release/' subfolder. Extract the produced archive file, 
   	e.g., savagewheels-1.5.0-Linux-x64.sh, to your (desired) Games folder.
   	
	e) Start the game run:
	$ ./savagewheels  
	or
	$ ./run.sh
	
	The 'run.sh' script will attempt to set the LD_LIBRARY_PATH in case you 
	are missing libSDL or FModEx shared object libraries.
   
	If you experience problems with the automated 'build.sh' script or you
	would like to change build options you can build manually with CMake.
   
	a) Go to the release/ sub folder and run:
	$ cmake -G "Unix Makefiles" ../ -DCMAKE_BUILD_TYPE:STRING=Release

	b) Build with:
	$ make
   
	c) Create the installation package with:
	$ cpack
	
3.2.1) Sound libraries
3.2.1.1) SDL_mixer

	Install the SDL_mixer library using your package manager.

3.2.1.2) FMod Ex

	Install the FMod Ex package using the package manager on your Linux 
	distribution or get the package from FMod's website. If you choose
	the second option you will need to copy the api/ folder from FMod's 
	installation package into the libs/ subfolder of savage wheels.
	
	When you are running CMake, specify the SOUND=FMOD option, e.g.,
	$ cmake -G "Unix Makefiles" ../ -DCMAKE_BUILD_TYPE:STRING=Release -DSOUND=FMOD	

3.2.1.3) No sound

	To build without sound & music run:
	$ cmake -G "Unix Makefiles" ../ -DCMAKE_BUILD_TYPE:STRING=Release -DSOUND=NO

3.2.2) Compile 32-bit version on 64-bit Linux

	This requires that you have the 'gcc-multilib' package installed on your 
	system. You will also need to have 32-bit versions of libSDL.so and 
	libfmodex.so.
	
	After all required packages are installed build the makefile by running:
	$ cmake -G "Unix Makefiles" ../ -DCMAKE_BUILD_TYPE:STRING=Release -DM32=1

3.4) Packaging

	A self-extracting STGZ file will be created by default when running:
	$ cpack
	after the build process has finished.

3.3.1) Debian
	
	Debian/Ubuntu users may run:
	$ cpack -G DEB
	This will create a .deb package that you can install with, e.g.,
	$ dpkg -i savagewheels-1.5.0-Linux-x64.deb

4) Installation on Windows

4.1) Requirements
  * MinGW (Minimalist GNU for Windows). I have only tested with Mingw32.
  * CMake 2.8.x
  * libSDL >= 1.2.11 - Download the Development Libraries archive from 
    http://www.libsdl.org/download-1.2.php.
  * For music support either:
    - SDL_Mixer >= 1.2.12 - Download the binary SDL_mixer-1.2.x-win32.zip 
	  package and the source SDL_mixer-1.2.x.zip package from 
	  http://www.libsdl.org/projects/SDL_mixer/.
  or
    - FMod Ex API 4.x - Download and install the FMOD Ex API installer EXE 
	  from www.fmod.org.
	
4.2) Compile & Build

	a) Extract the contents of SDL 1.2.x package into the libs/ subfolder. 
	Set the environment variable SDLDIR=<SDL-directory-in-libs>.
	
	b) Install one of the supported sound libraries. See 4.2.1)

	c) Run CMake manually. Go to the release/ sub folder and run.
	> cmake -G "MinGW Makefiles" ../ -DCMAKE_BUILD_TYPE:STRING=Release

	d) Build with:
	> mingw32-make
   
	e) Create the installation package with:
	> cpack

	f) Extract the produced archive file, e.g., 
	savagewheels-1.5.0-Windows-x86.tar.gz to your desired Games folder.
	
	g) Start the game with:
	> savagewheels  

4.2.1) Sound libraries
4.2.1.1) SDL_mixer
	
	Copy the contents of the SDL_mixer-1.2.x-win32 binary package to the
	<SDL-directory-in-libs>/lib. 
	
	Copy the SDL_mixer.h header file from SDL_mixer-1.2.x.zip sources package
	to the <SDL-directory-in-libs>/include. 
	
4.2.1.2) FMod Ex

	Install the FMod Ex API and copy the api/ folder from FMod's installation
	into the libs/ subfolder of savage wheels.
	
	When you are running CMake, specify the SOUND=FMOD option, e.g.,
	> cmake -G "MinGW Makefiles" ../ -DCMAKE_BUILD_TYPE:STRING=Release -DSOUND=FMOD
	
4.2.1.3) No sound

	To build without sound & music run:
	$ cmake -G "Unix Makefiles" ../ -DCMAKE_BUILD_TYPE:STRING=Release -DSOUND=NO	
	
4.2.2) Compiling a Debug version

To build a Debug version to catch a bug or something use the following:

	$ cmake -G "<?> Makefiles" ../ -DCMAKE_BUILD_TYPE:STRING=Debug

4.3) Packaging

	A tar.gz file will be created by default when running:
	$ cpack
	after the build process has finished.
